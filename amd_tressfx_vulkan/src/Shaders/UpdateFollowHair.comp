#version 450

#include "SimulationConfig.glsl"

layout (local_size_x = THREAD_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(std430, set = 1, binding = IDSRV_HAIR_VERTEX_POSITIONS) buffer writeablePositions
{
  vec4 g_HairVertexPositions[];
};
layout(set = 1, binding = IDSRV_HAIR_ROOT_OFFSET) uniform samplerBuffer g_FollowHairRootOffset;

#include "IndicesComputations.glsl"

shared vec4 sharedPos[THREAD_GROUP_SIZE];

// One thread computes one vertex.
void main()
{
  uint globalStrandIndex, localStrandIndex, localVertexIndex, numVerticesInTheStrand, indexForSharedMem, strandType;
  int globalVertexIndex;
  CalcIndicesInVertexLevelMaster(gl_LocalInvocationID.x, gl_WorkGroupID.x, globalStrandIndex, localStrandIndex, globalVertexIndex, localVertexIndex, numVerticesInTheStrand, indexForSharedMem, strandType);

  sharedPos[indexForSharedMem] = g_HairVertexPositions[globalVertexIndex];
  barrier();

  for (int i = 0; i < g_NumFollowHairsPerGuideHair; i++)
  {
	  int globalFollowVertexIndex = globalVertexIndex + int(numVerticesInTheStrand) * (i + 1);
	  int globalFollowStrandIndex = int(globalStrandIndex) + i + 1;
	  float factor = g_TipSeparationFactor * (float(localVertexIndex) / float(numVerticesInTheStrand)) + 1.0f;
	  vec3 followPos = sharedPos[indexForSharedMem].xyz + factor * texelFetch(g_FollowHairRootOffset, globalFollowStrandIndex).xyz;
	  g_HairVertexPositions[globalFollowVertexIndex].xyz = followPos;
  }

  return;
}
